generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  name       String
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now())

  accounts   Account[]
  sessions   Session[]
  ratingBook RatingBook[]
  userBook   UserBook[]
  BookReview BookReview[]

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  user_id                  String
  type                     String
  provider                 String
  provider_account_id      String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model Book {
  id          String  @id @default(uuid())
  title       String  @unique
  author      String
  total_pages Int?
  cover_image String?

  ratingBook   RatingBook[]
  userBook     UserBook[]
  bookCategory BookCategory[]
  bookReview   BookReview[]

  @@map("books")
}

model Category {
  id       String @id @default(uuid())
  category String @unique

  bookCategory BookCategory[]

  @@map("categories")
}

model BookCategory {
  book_id     String
  category_id String

  book     Book     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@id([book_id, category_id])
  @@index([book_id])
  @@map("books_categories")
}

model RatingBook {
  id         String    @id @default(uuid())
  rating     Decimal   @db.Decimal(10, 2)
  book_id    String
  user_id    String
  rated_at   DateTime  @default(now())
  updated_at DateTime?

  book Book @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([book_id, user_id])
  @@index([book_id, user_id])
  @@map("rating_books")
}

model BookReview {
  id         String    @id @default(uuid())
  review     String
  book_id    String
  user_id    String
  created_at DateTime  @default(now())
  updated_at DateTime?

  book Book @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([user_id, book_id])
  @@map("books_reviews")
}

model UserBook {
  id               String   @id @default(uuid())
  user_id          String
  book_id          String
  has_already_read Boolean?
  is_reading       Boolean?
  wish_read        Boolean?

  book Book @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([user_id, book_id])
  @@index([user_id, book_id])
  @@map("users_books")
}
